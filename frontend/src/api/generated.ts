/**
 * SDP.TeamAlpha.Journals.Services
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as querystring from "querystring";
import * as url from "url";

import * as isomorphicFetch from "isomorphic-fetch";
import * as assign from "core-js/library/fn/object/assign";

interface Dictionary<T> { [index: string]: T; }
export interface FetchAPI { (url: string, init?: any): Promise<any>; }

const BASE_PATH = "http://localhost:55400".replace(/\/+$/, "");

export interface FetchArgs {
    url: string;
    options: any;
}

export class BaseAPI {
    basePath: string;
    fetch: FetchAPI;

    constructor(fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) {
        this.basePath = basePath;
        this.fetch = fetch;


        // include cookies
        this.fetch = (url, options) => {
            options.credentials = 'include';
            return fetch(url, options);
        }

    }
};

export interface CreateEntryRequest {
    "Title"?: string;
    "ParentId"?: number;
    "Body"?: string;
}

export interface CreateNewJournalRequest {
    "ProjectName"?: string;
    "OwnerUsername"?: string;
}

export interface EditEntryRequest {
    "EntryId"?: number;
    "Body"?: string;
}

export interface HideJournalRequest {
    "JournalId"?: number;
    "Hidden"?: boolean;
}

export interface Journal {
    "Id"?: number;
    "ProjectName"?: string;
    "Entries"?: Array<JournalEntry>;
    "OwnerId"?: number;
    "AuthorId"?: number;
    "Hidden"?: boolean;
}

export interface JournalEntry {
    "Id"?: number;
    "Revisions"?: Array<Revision>;
    "Title"?: string;
    "Created"?: Date;
    "ParentId"?: number;
    "AuthorId"?: number;
    "OwnerId"?: number;
    "Hidden"?: boolean;
    "Deleted"?: boolean;
    "LatestRevision"?: Revision;
}

export interface ListEntriesRequest {
    "ParentId"?: number;
    "ShowHidden"?: boolean;
    "StartDate"?: Date;
    "EndDate"?: Date;
}

export interface LoginWithCredentialsRequest {
    "Username"?: string;
    "Password"?: string;
}

export interface LoginWithCredentialsResponse {
    "ValidationResults"?: Array<ValidatorResult>;
    "Message"?: string;
    "User"?: User;
}

export interface RegisterNewUserRequest {
    "Username"?: string;
    "FirstName"?: string;
    "LastName"?: string;
    "Email"?: string;
    "Password"?: string;
    "DateOfBirth"?: Date;
    "Company"?: string;
}

export interface RegisterNewUserResponse {
    "ValidationResults"?: Array<ValidatorResult>;
    "UserId"?: number;
}

export interface Revision {
    "Id"?: number;
    "ParentId"?: number;
    "Edited"?: Date;
    "Body"?: string;
}

export interface SearchEntryRequest {
    "JournalId"?: number;
    "ShowHidden"?: boolean;
    "InBody"?: string;
    "Name"?: string;
    "StartDate"?: Date;
    "EndDate"?: Date;
}

export interface ToggleHiddenRequest {
    "EntryId"?: number;
    "Hidden"?: boolean;
}

export interface User {
    "Id"?: number;
    "Password"?: string;
    "Username"?: string;
    "AccountConfirmed"?: boolean;
    "PersonalDetails"?: UserPersonalDetails;
}

export interface UserPersonalDetails {
    "FirstName"?: string;
    "LastName"?: string;
    "Company"?: string;
}

export interface ValidatorResult {
    "Field"?: string;
    "Message"?: string;
    "IsValid"?: boolean;
}

export interface ViewJournalEntryResponse {
    "Title"?: string;
    "Created"?: Date;
    "LatestRevision"?: Revision;
}

export interface ViewJournalRequest {
    "JournalId"?: number;
}

export interface ViewJournalResponse {
    "JournalId"?: number;
    "ProjectName"?: string;
    "Entries"?: Array<ViewJournalEntryResponse>;
    "Journal"?: Journal;
}



/**
 * EntryApi - fetch parameter creator
 */
export const EntryApiFetchParamCreator = {
    /**
     * 
     * @param request 
     */
    entryCreateNewEntry(params: {  "request": CreateEntryRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling entryCreateNewEntry");
        }
        const baseUrl = `/api/Entry/Create`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param entryId 
     */
    entryDeleteEntry(params: {  "entryId": number; }, options?: any): FetchArgs {
        // verify required parameter "entryId" is set
        if (params["entryId"] == null) {
            throw new Error("Missing required parameter entryId when calling entryDeleteEntry");
        }
        const baseUrl = `/api/Entry/Delete`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "entryId": params["entryId"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param request 
     */
    entryEditEntry(params: {  "request": EditEntryRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling entryEditEntry");
        }
        const baseUrl = `/api/Entry/Edit`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param request 
     */
    entryListEntries(params: {  "request": ListEntriesRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling entryListEntries");
        }
        const baseUrl = `/api/Entry/List`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param request 
     */
    entrySearchEntries(params: {  "request": SearchEntryRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling entrySearchEntries");
        }
        const baseUrl = `/api/Entry/Search`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param request 
     */
    entryToggleHidden(params: {  "request": ToggleHiddenRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling entryToggleHidden");
        }
        const baseUrl = `/api/Entry/ToggleHidden`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * EntryApi - functional programming interface
 */
export const EntryApiFp = {
    /**
     * 
     * @param request 
     */
    entryCreateNewEntry(params: { "request": CreateEntryRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<JournalEntry> {
        const fetchArgs = EntryApiFetchParamCreator.entryCreateNewEntry(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param entryId 
     */
    entryDeleteEntry(params: { "entryId": number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = EntryApiFetchParamCreator.entryDeleteEntry(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param request 
     */
    entryEditEntry(params: { "request": EditEntryRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Revision> {
        const fetchArgs = EntryApiFetchParamCreator.entryEditEntry(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param request 
     */
    entryListEntries(params: { "request": ListEntriesRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<JournalEntry>> {
        const fetchArgs = EntryApiFetchParamCreator.entryListEntries(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param request 
     */
    entrySearchEntries(params: { "request": SearchEntryRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<JournalEntry>> {
        const fetchArgs = EntryApiFetchParamCreator.entrySearchEntries(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param request 
     */
    entryToggleHidden(params: { "request": ToggleHiddenRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = EntryApiFetchParamCreator.entryToggleHidden(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * EntryApi - object-oriented interface
 */
export class EntryApi extends BaseAPI {
    /**
     * 
     * @param request 
     */
    entryCreateNewEntry(params: {  "request": CreateEntryRequest; }, options?: any) {
        return EntryApiFp.entryCreateNewEntry(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param entryId 
     */
    entryDeleteEntry(params: {  "entryId": number; }, options?: any) {
        return EntryApiFp.entryDeleteEntry(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param request 
     */
    entryEditEntry(params: {  "request": EditEntryRequest; }, options?: any) {
        return EntryApiFp.entryEditEntry(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param request 
     */
    entryListEntries(params: {  "request": ListEntriesRequest; }, options?: any) {
        return EntryApiFp.entryListEntries(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param request 
     */
    entrySearchEntries(params: {  "request": SearchEntryRequest; }, options?: any) {
        return EntryApiFp.entrySearchEntries(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param request 
     */
    entryToggleHidden(params: {  "request": ToggleHiddenRequest; }, options?: any) {
        return EntryApiFp.entryToggleHidden(params, options)(this.fetch, this.basePath);
    }
};

/**
 * EntryApi - factory interface
 */
export const EntryApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param request 
         */
        entryCreateNewEntry(params: {  "request": CreateEntryRequest; }, options?: any) {
            return EntryApiFp.entryCreateNewEntry(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param entryId 
         */
        entryDeleteEntry(params: {  "entryId": number; }, options?: any) {
            return EntryApiFp.entryDeleteEntry(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param request 
         */
        entryEditEntry(params: {  "request": EditEntryRequest; }, options?: any) {
            return EntryApiFp.entryEditEntry(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param request 
         */
        entryListEntries(params: {  "request": ListEntriesRequest; }, options?: any) {
            return EntryApiFp.entryListEntries(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param request 
         */
        entrySearchEntries(params: {  "request": SearchEntryRequest; }, options?: any) {
            return EntryApiFp.entrySearchEntries(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param request 
         */
        entryToggleHidden(params: {  "request": ToggleHiddenRequest; }, options?: any) {
            return EntryApiFp.entryToggleHidden(params, options)(fetch, basePath);
        },
    };
};


/**
 * JournalApi - fetch parameter creator
 */
export const JournalApiFetchParamCreator = {
    /**
     * 
     * @param request 
     */
    journalCreateJournal(params: {  "request": CreateNewJournalRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling journalCreateJournal");
        }
        const baseUrl = `/api/Journal/Create`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param request 
     */
    journalHideJournal(params: {  "request": HideJournalRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling journalHideJournal");
        }
        const baseUrl = `/api/Journal/SetHidden`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param showHidden 
     */
    journalListJournals(params: {  "showHidden": boolean; }, options?: any): FetchArgs {
        // verify required parameter "showHidden" is set
        if (params["showHidden"] == null) {
            throw new Error("Missing required parameter showHidden when calling journalListJournals");
        }
        const baseUrl = `/api/Journal/List`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "showHidden": params["showHidden"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param request 
     */
    journalViewJournal(params: {  "request": ViewJournalRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling journalViewJournal");
        }
        const baseUrl = `/api/Journal/View`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * JournalApi - functional programming interface
 */
export const JournalApiFp = {
    /**
     * 
     * @param request 
     */
    journalCreateJournal(params: { "request": CreateNewJournalRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ViewJournalResponse> {
        const fetchArgs = JournalApiFetchParamCreator.journalCreateJournal(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param request 
     */
    journalHideJournal(params: { "request": HideJournalRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = JournalApiFetchParamCreator.journalHideJournal(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param showHidden 
     */
    journalListJournals(params: { "showHidden": boolean;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ViewJournalResponse>> {
        const fetchArgs = JournalApiFetchParamCreator.journalListJournals(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param request 
     */
    journalViewJournal(params: { "request": ViewJournalRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ViewJournalResponse> {
        const fetchArgs = JournalApiFetchParamCreator.journalViewJournal(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * JournalApi - object-oriented interface
 */
export class JournalApi extends BaseAPI {
    /**
     * 
     * @param request 
     */
    journalCreateJournal(params: {  "request": CreateNewJournalRequest; }, options?: any) {
        return JournalApiFp.journalCreateJournal(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param request 
     */
    journalHideJournal(params: {  "request": HideJournalRequest; }, options?: any) {
        return JournalApiFp.journalHideJournal(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param showHidden 
     */
    journalListJournals(params: {  "showHidden": boolean; }, options?: any) {
        return JournalApiFp.journalListJournals(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param request 
     */
    journalViewJournal(params: {  "request": ViewJournalRequest; }, options?: any) {
        return JournalApiFp.journalViewJournal(params, options)(this.fetch, this.basePath);
    }
};

/**
 * JournalApi - factory interface
 */
export const JournalApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param request 
         */
        journalCreateJournal(params: {  "request": CreateNewJournalRequest; }, options?: any) {
            return JournalApiFp.journalCreateJournal(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param request 
         */
        journalHideJournal(params: {  "request": HideJournalRequest; }, options?: any) {
            return JournalApiFp.journalHideJournal(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param showHidden 
         */
        journalListJournals(params: {  "showHidden": boolean; }, options?: any) {
            return JournalApiFp.journalListJournals(params, options)(fetch, basePath);
        },
        /**
         * 
         * @param request 
         */
        journalViewJournal(params: {  "request": ViewJournalRequest; }, options?: any) {
            return JournalApiFp.journalViewJournal(params, options)(fetch, basePath);
        },
    };
};


/**
 * LoginApi - fetch parameter creator
 */
export const LoginApiFetchParamCreator = {
    /**
     * 
     * @param request 
     */
    loginLoginWithCredentials(params: {  "request": LoginWithCredentialsRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling loginLoginWithCredentials");
        }
        const baseUrl = `/api/LoginWithCredentials`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    loginLogout(options?: any): FetchArgs {
        const baseUrl = `/api/Logout`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * LoginApi - functional programming interface
 */
export const LoginApiFp = {
    /**
     * 
     * @param request 
     */
    loginLoginWithCredentials(params: { "request": LoginWithCredentialsRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LoginWithCredentialsResponse> {
        const fetchArgs = LoginApiFetchParamCreator.loginLoginWithCredentials(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    loginLogout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = LoginApiFetchParamCreator.loginLogout(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * LoginApi - object-oriented interface
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param request 
     */
    loginLoginWithCredentials(params: {  "request": LoginWithCredentialsRequest; }, options?: any) {
        return LoginApiFp.loginLoginWithCredentials(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    loginLogout(options?: any) {
        return LoginApiFp.loginLogout(options)(this.fetch, this.basePath);
    }
};

/**
 * LoginApi - factory interface
 */
export const LoginApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param request 
         */
        loginLoginWithCredentials(params: {  "request": LoginWithCredentialsRequest; }, options?: any) {
            return LoginApiFp.loginLoginWithCredentials(params, options)(fetch, basePath);
        },
        /**
         * 
         */
        loginLogout(options?: any) {
            return LoginApiFp.loginLogout(options)(fetch, basePath);
        },
    };
};


/**
 * OptionApi - fetch parameter creator
 */
export const OptionApiFetchParamCreator = {
    /**
     * 
     * @param pathInfo 
     */
    optionOption(params: {  "pathInfo": string; }, options?: any): FetchArgs {
        // verify required parameter "pathInfo" is set
        if (params["pathInfo"] == null) {
            throw new Error("Missing required parameter pathInfo when calling optionOption");
        }
        const baseUrl = `/{pathInfo}`
            .replace(`{${"pathInfo"}}`, `${ params["pathInfo"] }`);
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    optionOption_1(options?: any): FetchArgs {
        const baseUrl = `/api/Option`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "OPTIONS" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * OptionApi - functional programming interface
 */
export const OptionApiFp = {
    /**
     * 
     * @param pathInfo 
     */
    optionOption(params: { "pathInfo": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = OptionApiFetchParamCreator.optionOption(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    optionOption_1(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = OptionApiFetchParamCreator.optionOption_1(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * OptionApi - object-oriented interface
 */
export class OptionApi extends BaseAPI {
    /**
     * 
     * @param pathInfo 
     */
    optionOption(params: {  "pathInfo": string; }, options?: any) {
        return OptionApiFp.optionOption(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    optionOption_1(options?: any) {
        return OptionApiFp.optionOption_1(options)(this.fetch, this.basePath);
    }
};

/**
 * OptionApi - factory interface
 */
export const OptionApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param pathInfo 
         */
        optionOption(params: {  "pathInfo": string; }, options?: any) {
            return OptionApiFp.optionOption(params, options)(fetch, basePath);
        },
        /**
         * 
         */
        optionOption_1(options?: any) {
            return OptionApiFp.optionOption_1(options)(fetch, basePath);
        },
    };
};


/**
 * RegisterApi - fetch parameter creator
 */
export const RegisterApiFetchParamCreator = {
    /**
     * 
     * @param request 
     */
    registerRegisterNewUser(params: {  "request": RegisterNewUserRequest; }, options?: any): FetchArgs {
        // verify required parameter "request" is set
        if (params["request"] == null) {
            throw new Error("Missing required parameter request when calling registerRegisterNewUser");
        }
        const baseUrl = `/api/Register`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        contentTypeHeader = { "Content-Type": "application/json" };
        if (params["request"]) {
            fetchOptions.body = JSON.stringify(params["request"] || {});
        }
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * RegisterApi - functional programming interface
 */
export const RegisterApiFp = {
    /**
     * 
     * @param request 
     */
    registerRegisterNewUser(params: { "request": RegisterNewUserRequest;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RegisterNewUserResponse> {
        const fetchArgs = RegisterApiFetchParamCreator.registerRegisterNewUser(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * RegisterApi - object-oriented interface
 */
export class RegisterApi extends BaseAPI {
    /**
     * 
     * @param request 
     */
    registerRegisterNewUser(params: {  "request": RegisterNewUserRequest; }, options?: any) {
        return RegisterApiFp.registerRegisterNewUser(params, options)(this.fetch, this.basePath);
    }
};

/**
 * RegisterApi - factory interface
 */
export const RegisterApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param request 
         */
        registerRegisterNewUser(params: {  "request": RegisterNewUserRequest; }, options?: any) {
            return RegisterApiFp.registerRegisterNewUser(params, options)(fetch, basePath);
        },
    };
};


/**
 * UserApi - fetch parameter creator
 */
export const UserApiFetchParamCreator = {
    /**
     * 
     * @param id 
     */
    userDeleteUser(params: {  "id": number; }, options?: any): FetchArgs {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling userDeleteUser");
        }
        const baseUrl = `/api/User/DeleteUser`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "id": params["id"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "DELETE" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    userGetCurrentUser(options?: any): FetchArgs {
        const baseUrl = `/api/User`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "GET" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     */
    userListUsers(options?: any): FetchArgs {
        const baseUrl = `/api/User/ListUsers`;
        let urlObj = url.parse(baseUrl, true);
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * 
     * @param username 
     */
    userUserExists(params: {  "username": string; }, options?: any): FetchArgs {
        // verify required parameter "username" is set
        if (params["username"] == null) {
            throw new Error("Missing required parameter username when calling userUserExists");
        }
        const baseUrl = `/api/User/UserExists`;
        let urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "username": params["username"],
        });
        let fetchOptions: RequestInit = assign({}, { method: "POST" }, options);

        let contentTypeHeader: Dictionary<string> = {};
        if (contentTypeHeader) {
            fetchOptions.headers = assign({}, contentTypeHeader, fetchOptions.headers);
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};

/**
 * UserApi - functional programming interface
 */
export const UserApiFp = {
    /**
     * 
     * @param id 
     */
    userDeleteUser(params: { "id": number;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
        const fetchArgs = UserApiFetchParamCreator.userDeleteUser(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    userGetCurrentUser(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<User> {
        const fetchArgs = UserApiFetchParamCreator.userGetCurrentUser(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     */
    userListUsers(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<User>> {
        const fetchArgs = UserApiFetchParamCreator.userListUsers(options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
    /**
     * 
     * @param username 
     */
    userUserExists(params: { "username": string;  }, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
        const fetchArgs = UserApiFetchParamCreator.userUserExists(params, options);
        return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        };
    },
};

/**
 * UserApi - object-oriented interface
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param id 
     */
    userDeleteUser(params: {  "id": number; }, options?: any) {
        return UserApiFp.userDeleteUser(params, options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    userGetCurrentUser(options?: any) {
        return UserApiFp.userGetCurrentUser(options)(this.fetch, this.basePath);
    }
    /**
     * 
     */
    userListUsers(options?: any) {
        return UserApiFp.userListUsers(options)(this.fetch, this.basePath);
    }
    /**
     * 
     * @param username 
     */
    userUserExists(params: {  "username": string; }, options?: any) {
        return UserApiFp.userUserExists(params, options)(this.fetch, this.basePath);
    }
};

/**
 * UserApi - factory interface
 */
export const UserApiFactory = function (fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param id 
         */
        userDeleteUser(params: {  "id": number; }, options?: any) {
            return UserApiFp.userDeleteUser(params, options)(fetch, basePath);
        },
        /**
         * 
         */
        userGetCurrentUser(options?: any) {
            return UserApiFp.userGetCurrentUser(options)(fetch, basePath);
        },
        /**
         * 
         */
        userListUsers(options?: any) {
            return UserApiFp.userListUsers(options)(fetch, basePath);
        },
        /**
         * 
         * @param username 
         */
        userUserExists(params: {  "username": string; }, options?: any) {
            return UserApiFp.userUserExists(params, options)(fetch, basePath);
        },
    };
};

